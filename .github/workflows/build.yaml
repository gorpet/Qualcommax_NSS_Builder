name: Build OpenWrt for Specific Target and Release

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 */2 * * *"

env:
  OPENWRT_REPOSITORY: qosmio/openwrt-ipq
  OPENWRT_BRANCH: qualcommax-6.x-nss-wifi
  CONFIG_FILE: ax3600.config
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: qualcommax-6.x-nss-wifi
  NSS_PACKAGES_REPOSITORY: qosmio/nss-packages
  NSS_PACKAGES_REPOSITORY_BRANCH: NSS-12.5-K6.x
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  compare-commits:
    runs-on: ubuntu-24.04
    outputs:
      commits_match: ${{ steps.compare.outputs.commits_match }}
      commit1: ${{ steps.compare.outputs.commit1 }}
      commit2: ${{ steps.compare.outputs.commit2 }}
    steps:
      - name: Fetch latest commits and compare
        run: |
          # Fetch latest commit from OPENWRT_REPOSITORY
          COMMIT1=$(gh api repos/${{ env.OPENWRT_REPOSITORY }}/commits/${{ env.OPENWRT_BRANCH }} --jq '.sha')
          echo "commit1=$COMMIT1" >> $GITHUB_OUTPUT

          # Fetch latest commit from NSS_PACKAGES_REPOSITORY
          COMMIT2=$(gh api repos/${{ env.NSS_PACKAGES_REPOSITORY }}/commits/${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }} --jq '.sha')
          echo "commit2=$COMMIT2" >> $GITHUB_OUTPUT

          # Fetch latest release of current repository
          LATEST_RELEASE=$(gh api repos/${{ github.repository }}/releases/latest --jq '.body')

          # Extract commits from release body
          OPENWRT_COMMIT=$(echo "$LATEST_RELEASE" | grep -oP 'Openwrt Commit: \K[a-f0-9]+')
          NSS_COMMIT=$(echo "$LATEST_RELEASE" | grep -oP 'NSS Packages Commit: \K[a-f0-9]+')

          # Compare commits
          if [ "$COMMIT1" = "$OPENWRT_COMMIT" ] && [ "$COMMIT2" = "$NSS_COMMIT" ]; then
            echo "commits_match=true" >> $GITHUB_OUTPUT
          else
            echo "commits_match=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build OpenWrt
    runs-on: ubuntu-24.04
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-setuptools rsync \
            swig unzip zlib1g-dev file wget

      - name: Checkout OpenWrt Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.OPENWRT_REPOSITORY }}
          ref: ${{ env.OPENWRT_BRANCH }}

      - name: Checkout Local Repository
        uses: actions/checkout@v4
        with:
          path: "local_repo"

      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Copy Configuration File
        run: cp local_repo/${{ env.CONFIG_FILE }} .config

      - name: Copy Custom Files
        run: |
          mkdir -p ${{ env.CUSTOM_FILES_PATH }}
          cp -r local_repo/${{ env.CUSTOM_FILES_PATH }}* ${{ env.CUSTOM_FILES_PATH }}

      - name: Append CONFIG_RELR=y to target/linux/qualcommax/config-6.6
        run: echo "CONFIG_RELR=y" >> target/linux/qualcommax/config-6.6

      - name: Configure Build
        run: make defconfig V=s -j$(nproc)

      - name: Download Dependencies
        run: make download V=s -j$(nproc)

      - name: Build Firmware Image
        run: make world V=s -j$(nproc)

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipq807x-images
          path: bin/targets/qualcommax/ipq807x

  release:
    needs: [build, compare-commits]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ipq807x-images
          path: ./firmware

      - name: Create Release
        run: |
          VERSION="${{ env.RELEASE_PREFIX }}-$(date +'%Y.%m.%d')"
          RELEASE_NOTES="Openwrt Commit: ${{ needs.compare-commits.outputs.commit1 }}
          NSS Packages Commit: ${{ needs.compare-commits.outputs.commit2 }}"

          # Check if the release already exists
          if gh release view "$VERSION" &>/dev/null; then
            gh release delete "$VERSION" --cleanup-tag -y
          fi

          FILES_TO_UPLOAD=$(find ./firmware -maxdepth 1 -type f)

          # Create the new release
          gh release create "$VERSION" $FILES_TO_UPLOAD \
            --title "$VERSION" \
            --notes "$RELEASE_NOTES"

  cleanup-releases:
    needs: release
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete old releases and tags
        run: |
          # Get all release tags, sorted by creation date (newest first)
          RELEASE_TAGS=$(gh release list --json tagName --jq '.[].tagName')

          # Count total releases
          TOTAL_RELEASES=$(echo "$RELEASE_TAGS" | wc -l)

          # If there are more than 2 releases, delete the older ones
          if [ $TOTAL_RELEASES -gt 2 ]; then
            # Skip the first two (latest) releases
            RELEASES_TO_DELETE=$(echo "$RELEASE_TAGS" | tail -n +3)

            # Loop through releases to delete
            echo "$RELEASES_TO_DELETE" | while read -r tag; do
              echo "Deleting release with tag $tag"
              gh release delete "$tag" --cleanup-tag -y
            done
          fi
